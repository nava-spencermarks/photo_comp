name: Coverage Guard

on:
  pull_request:
    branches: [ main ]

jobs:
  coverage-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      issues: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Need full history to compare with main branch

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt

    - name: Set up baseline from main branch
      run: |
        set -e
        git checkout main
        python coverage_tracker.py --reset-baseline
        git checkout ${{ github.head_ref }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run tests and check coverage regression
      run: |
        set -e
        python -m pytest --cov=src --cov-report=xml --cov-report=term-missing -v test/test_inspect_image.py test/test_main.py test/test_face_compare.py
        python coverage_tracker.py --tolerance 2.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate coverage summary
      run: |
        # Our coverage_tracker.py already handles all this logic!
        # Just capture its output for GitHub
        python coverage_tracker.py --tolerance 2.0 > coverage_summary.txt 2>&1 || true
        
        # Extract coverage values for GitHub outputs
        if [ -f .coverage_baseline.json ]; then
          MAIN_COVERAGE=$(python -c "import json; print(json.load(open('.coverage_baseline.json'))['total_coverage'])")
        else
          MAIN_COVERAGE="0"
        fi
        
        CURRENT_COVERAGE=$(python -c "import re; output=open('coverage_summary.txt').read(); match=re.search(r'Current Coverage: ([0-9.]+)%', output); print(match.group(1) if match else '0')")
        
        echo "MAIN_COVERAGE=$MAIN_COVERAGE" >> $GITHUB_OUTPUT
        echo "CURRENT_COVERAGE=$CURRENT_COVERAGE" >> $GITHUB_OUTPUT
        
        # Use coverage summary as GitHub step summary
        cat coverage_summary.txt >> $GITHUB_STEP_SUMMARY

    - name: Comment PR with coverage results
      if: github.event_name == 'pull_request' && steps.coverage.outputs.MAIN_COVERAGE != 'unknown'
      continue-on-error: true
      uses: actions/github-script@v7
      with:
        script: |
          try {
            const mainCoverage = '${{ steps.coverage.outputs.MAIN_COVERAGE }}';
            const currentCoverage = '${{ steps.coverage.outputs.CURRENT_COVERAGE }}';
            const diff = parseFloat(currentCoverage) - parseFloat(mainCoverage);
            
            console.log(`Coverage data: main=${mainCoverage}%, current=${currentCoverage}%, diff=${diff.toFixed(1)}%`);
            
            let emoji, status, message;
            if (diff > 2) {
              emoji = "✅";
              status = "improved significantly";
              message = `Coverage ${status} by ${diff.toFixed(1)}%`;
            } else if (diff > 0) {
              emoji = "✅";
              status = "improved";
              message = `Coverage ${status} by ${diff.toFixed(1)}%`;
            } else if (diff >= -2) {
              emoji = "📊";
              status = "maintained";
              message = `Coverage ${status} (${diff.toFixed(1)}% change, within tolerance)`;
            } else {
              emoji = "⚠️";
              status = "declined significantly";
              message = `Coverage ${status} by ${Math.abs(diff).toFixed(1)}%`;
            }
            
            const body = `## ${emoji} Coverage Report
            
| Branch | Coverage |
|--------|----------|
| main | ${mainCoverage}% |
| PR branch | ${currentCoverage}% |

**${message}** (${mainCoverage}% → ${currentCoverage}%)

${diff < -2 ? '❌ **Significant regression detected!** This exceeds the 2% tolerance.' : diff >= -2 && diff < 0 ? '✅ **Within tolerance** - small coverage changes are acceptable.' : ''}`;
            
            console.log(`Attempting to comment on PR #${context.payload.pull_request.number}`);
            
            const result = await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
            
            console.log(`Comment created successfully: ${result.data.html_url}`);
            
          } catch (error) {
            console.error('Error creating PR comment:', error);
            console.error('Context payload:', JSON.stringify(context.payload, null, 2));
            // Don't fail the workflow if commenting fails
          }

    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: pr-coverage
        fail_ci_if_error: false
      continue-on-error: true